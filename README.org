#+STARTUP: showall indent
#+OPTIONS: tex:t toc:2 H:6 ^:{}
#+ODT_STYLES_FILE: "/Users/gilgamesh/Google Drive/Templates/styles.xml"

#+TITLE: Introduction to Git
#+AUTHOR: Derek Devnich

* Installation instructions
1. Up-to-date installation instructions for Git and Bash are available here: https://libguides.ucmerced.edu/software-carpentry/git/install
2. Create a Github account here: https://github.com/

* Unix Shell
** Intro comments about "shell"
- Broadly speaking, there is a tension between making computer systems fast and making them easy to use.
- A common solution is to create a 2-layer architecture: A fast, somewhat opaque core surrounded by a more friendly scriptable interface (also referred to as "hooks" or an "API"). Examples of this include video games, Emacs and other highly customizable code editors, and high-level special-purpose languages like Stata and Mathematica.
- Unix shell is the scriptable *shell* around the operating system. It provides a simple interface for making the operating system do work, without having to know exactly how it accomplishes that work.

** Very brief Bash intro
*** File system layout
- Minimal example: https://swcarpentry.github.io/shell-novice/02-filedir/index.html
- "directory" == folder
- Your files are in "/home/<your login>"or "/Users/<your login>"
- Trees are upside-down in computer science

*** Who are you?
#+BEGIN_SRC bash
whoami
#+END_SRC

*** Where are you?
#+BEGIN_SRC bash
pwd                             # Print Working Directory
#+END_SRC

*** What's in this directory?
Command flags modify what a command does.
#+BEGIN_SRC bash
ls                              # List directory contents
ls -a                           # ... and include hidden files
#+END_SRC

*** Getting help
#+BEGIN_SRC bash
man ls                          # Manual for "ls"
ls --help                       # In-line help info; should work in Windows
#+END_SRC

- You can navigate through the man page using the space bar and arrow keys
- Quit man with "q"
- Online references are available for Windows users who don't have man pages: https://linux.die.net/

*** Changing directories
When a command is followed by an argument, it acts on that argument.
#+BEGIN_SRC bash
cd Desktop
ls *.pdf                        # List all files ending in ".pdf"
cd ..                           # go up one directory
#+END_SRC

*** History and pipes
The terminal saves your command history (typically 500 or 1000 commands)
- You can see previous commands using the up/down arrows
- You can edit the command that's currently visible and run it

Once your command history gets big, you might want to search it:
#+BEGIN_SRC bash
history
history | grep ls               # pipe the output of history into search
#+END_SRC

* Why are we here?
#+name: Snapshot History
#+caption: Git creates a history of code snapshots. If you haven't updated a file since your previous snapshot, Git will re-use the old version of that file to save space (https://git-scm.com/).
[[file:images/snapshots.png]]

#+CAPTION: Base your new work on the most recent snapshot.
#+ATTR_ODT: :width 12
#+ATTR_HTML: :width 100px
#+NAME: Workspace or Working Tree
[[file:images/local-repository.png]]

- Move backwards and forwards in time using save points in your code history.
- Control what goes into a save point
- Collaborate
- Explore alternative versions of your project without destroying prior work
- Useful for text files, less useful for binary files (most of the useful features are text-oriented)

* Setup
** Identify yourself
All git commands are 2-part verbs, followed by flags and arguments. Use quotes if you have spaces in your arguments (e.g. user name):
#+BEGIN_SRC bash
git config --global user.name "Gilgamesh"
git config --global user.email gilgamesh@uruk.gov
#+END_SRC

** Line Endings
#+BEGIN_SRC bash
git config --global core.autocrlf input  # Unix and MacOS
git config --global core.autocrlf true   # Windows
#+END_SRC

** Editor
You can use any text editor, but you want a sensible default in case Git opens one for you:
#+BEGIN_SRC bash
git config --global core.editor nano
#+END_SRC

** Updating remotes
Only push the current branch (more about this later):
#+BEGIN_SRC bash
git config --global push.default simple
#+END_SRC

Merge, don't rebase (more about this later):
#+BEGIN_SRC bash
git config --global pull.rebase false
#+END_SRC

** (Optional) Change name of default branch
#+BEGIN_SRC bash
git config --global init.defaultBranch main
#+END_SRC

** Inspect your configuration
#+BEGIN_SRC bash
git config --list                   # or -l
git config --list --show-origin     # where is this setting coming from?
#+END_SRC

* Creating a repository
We are going to create and track plans for our garden.

** Create a directory
#+BEGIN_SRC bash
cd ~/Desktop
mkdir garden
cd garden
#+END_SRC

** Tell Git to make a repository
#+BEGIN_SRC bash
git init
ls
ls -a
#+END_SRC
Git uses this special subdirectory to store all the information about the project, including all files and sub-directories located within the project's directory.  If we ever delete the `.git` subdirectory, we will lose the project's history.

** Check status (we will do this a lot)
#+BEGIN_SRC bash
git status
#+END_SRC

* Tracking changes
** Add a file
#+BEGIN_SRC bash
touch shopping_list.txt
nano shopping_list.txt
#+END_SRC

#+BEGIN_EXAMPLE
1. Cherry tomatoes
#+END_EXAMPLE

Save and quit. You can verify that you've saved your changes in Bash:
#+BEGIN_SRC bash
ls
cat shopping_list.txt
#+END_SRC

** Commit cycle
#+CAPTION: Build a new snapshot ("commit") in the Staging Area.
#+NAME: First Commit
[[file:images/git-staging-area.svg]]

#+CAPTION: Commits include additions and deletions
#+NAME: Commit with multiple files
[[file:images/git-committing.svg]]

#+BEGIN_SRC bash
git status
git add shopping_list.txt
git status
git commit -m "Start shopping list for garden"
git status
#+END_SRC
- Commit messages should be useful; eventually there will be a lot of them (we'll come back to this)
- There are multiple synonym for each of these locations:
  - Workspace or Working Tree
  - Staging Area, Index, or Cache
  - Repository or Commit History

** Getting help
#+BEGIN_SRC bash
# Concicse help
git add -h

# Verbose help
man git-add
#+END_SRC

** Add more history
Edit with editor of your choice:
#+BEGIN_EXAMPLE
1. Cherry tomatoes
2. Italian basil
#+END_EXAMPLE

#+BEGIN_SRC bash
git status
git diff

# If you try to commit the file before you add it to the Staging area,
# nothing happens:
git commit -m "Add basil"
git status

# Add file to Staging area, then commit:
git add shopping_list.txt
git commit -m "Add basil"
#+END_SRC
*Instructor's note:*  Update drawing with repository history going back in time (H, H~1, H~2...)

** Add more history; look at Staging area vs Workspace
#+BEGIN_EXAMPLE
1. Cherry tomatoes
2. Italian basil
3. Jalapenos
#+END_EXAMPLE

#+BEGIN_SRC bash
# By default, "diff" shows changes to Workspace
git status
git diff

# Once the file is added to Staging, "diff" no longer shows changes
git add shopping_list.txt
git status
git diff

# You can examine Staging instead
git diff --cached               # or "--staged"
git commit -m "Add peppers"
git status
#+END_SRC
- Staging area is for creating sensible commits. You can edit multiple files and only add a subset of them to a given commit. This makes it easier to look back at your work.
- What goes in a commit?
  - A coherent functional chunk (whatever that means)
  - If you wanted to cleanly roll back, what would that look like?

** View commit history in the log
#+BEGIN_SRC bash
git log
git log --oneline
git log --oneline --graph       # Useful if you have many branches
git log --author=~Gilgamesh
git log --since=5.days          # or weeks, months, years
#+END_SRC
- You can identify commit by unique ID or by HEAD offset
- HEAD is a pointer to the most recent commit

** Directories aren't content
Try to commit an empty directory:
#+BEGIN_SRC bash
mkdir flowers
git status
git add flowers
git status
#+END_SRC

Now add files and try again:
#+BEGIN_SRC bash
touch flowers/roses flowers/tulips
git status
ls flowers
git add flowers
git commit -m "Initial thoughts on flowers"
#+END_SRC

* Exploring history
** Add more text to Workspace
#+BEGIN_EXAMPLE
1. Cherry tomatoes
2. Italian basil
3. Jalapenos
4. Cayenne peppers
#+END_EXAMPLE

** Inspect our changes
#+BEGIN_SRC bash
cat shopping_list.txt

# Identical to "git diff" with no argument
git diff HEAD shopping_list.txt

# Show all changes back to this point
git diff HEAD~1 shopping_list.txt
git diff HEAD~3 shopping_list.txt

# Show changes for just HEAD~3
git show HEAD~3 shopping_list.txt

# Show changes in range of commits
git diff HEAD~3..HEAD~1 shopping_list.txt
#+END_SRC

** Range syntax also works for logs
#+BEGIN_SRC bash
git log HEAD~3..HEAD~1
#+END_SRC

** Using unique ID instead of HEAD offset
#+BEGIN_SRC bash
git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b shopping_list.txt

# Use reduced ID from "git log --oneline"
git diff f22b25e shopping_list.txt
#+END_SRC

** Restore the Workspace to a clean state
#+BEGIN_SRC bash
git status                      # We have unstaged changes

# Revert the working tree to the most recent commit
git checkout HEAD shopping_list.txt
cat shopping_list.txt
#+END_SRC

* Moving through time
** Checkout old version of a file
#+CAPTION: Check out an old commit to view it
#+NAME: Checkout
[[file:images/git-checkout.svg]]

#+BEGIN_SRC bash
git checkout f22b25e shopping_list.txt   # or "git checkout HEAD~3 shopping_list.txt"
cat shopping_list.txt

# These changes are also in the Staging area; do a commit if you want to keep
# this older version
git status
git checkout HEAD shopping_list.txt      # get back the new version
#+END_SRC
*Instructor's note:*  Update drawing with files moving in and out of working tree/staging area

** Don't lose your head
What if you want to see a previous version of the whole project?
#+BEGIN_SRC bash
# Detached HEAD moves the whole HEAD pointer back to an earlier version
git checkout HEAD~2
git status

# Move HEAD back to latest commit by checking out the branch name
git checkout master
#+END_SRC
- You can also check out a tag.
- Unfortunately some of these terms, like "checkout", are overloaded. Think about what you want to do to your history, then look up the appropriate command.
*Instructor's note:*  Update drawing with moving HEAD pointer

* Branching and merging
#+CAPTION: Git branching and Merging (https://imgur.com/gallery/YG8In8X/new)
#+ATTR_ORG: :width 200px
#+NAME: Branching and Merging
[[file:images/branch-merge.png]]

** Create a new branch and switch to it
#+BEGIN_SRC bash
git checkout -b feature         # equivalent to "git branch feature" + "git checkout feature"
git branch                      # Show all branches
git status
#+END_SRC

#+CAPTION: Check out the branch to work on it (1)
#+NAME: Main branch
[[file:images/branch-old.png]]

#+CAPTION: Check out the branch to work on it (2)
#+NAME: Feature branch
[[file:images/branch-new.png]]

** Create a new file
#+BEGIN_SRC bash
touch feature.txt
nano feature.txt
#+END_SRC

#+BEGIN_EXAMPLE
This is a new feature we're trying out
#+END_EXAMPLE

#+BEGIN_SRC bash
  git add feature.txt
  git commit -m "Added a trial feature"
  ls                              # We have a new file
#+END_SRC

** Switch back to master and merge
#+BEGIN_SRC bash
  git checkout master
  ls                              # File doesn't exist on the master branch
  git merge feature
  ls                              # Merging the feature branch adds your changes
#+END_SRC
- This is simplest possible case; all of the new changes were in one branch
*Instructor's note:*  Draw the branch history with the merge (Fast-Forward merge moves branch tag). A branch history with competing changes is shown in the Conflicts section below (Recursive merge resembles octopus graph)

* Ignoring Things
** Create some output files
#+BEGIN_SRC bash
mkdir results
touch a.dat b.dat c.dat results/a.out results/b.out
ls
git status
#+END_SRC

** Create .gitignore
#+BEGIN_SRC bash
touch .gitignore
ls -a
#+END_SRC

** Ignore some files
#+BEGIN_EXAMPLE
*.dat
results/
#+END_EXAMPLE

#+BEGIN_SRC bash
# We are ignoreing .dat files and tracking .gitignore
git status
git add .gitignore
git commit -m "Ignore output files"
#+END_SRC
- Ignoring complicated directory structures can be tricky, come talk to me
- You should generally ignore archives (zip, tar), images (png, jpg), binaries (dmg, iso, exe), compiler output, log files, and .DS_Store (Mac)

* Github
#+CAPTION: Coordinate with co-authors.
#+ATTR_ODT: :width 12
#+ATTR_HTML: :width 100px
#+NAME: Distributed version control
[[file:images/distributed.png]]

** Git != Github
- easy collaboration
- sync between machines
- off-site backup
- peer review

** Set up new repository
- Create new repository (visual instructions here: https://swcarpentry.github.io/git-novice/07-github/index.html)
- Call it "garden"
- Find HTTPS string that identifies repository

** Configure remotes and push from local
#+BEGIN_SRC bash
git remote add origin https://github.com/devnich/garden.git
git remote -v
git push origin master          # you should get a password prompt
#+END_SRC
If you configure your origin as upstream, you can just do:
#+BEGIN_SRC bash
git push
#+END_SRC

** Check that you are up to date
#+BEGIN_SRC bash
git pull
#+END_SRC
- ~pull~ is a shortcut for ~fetch~ + ~merge~

* Collaborating
*Instructor's note:* Demo this section with two terminal windows, one for "garden" and one for "garden-clone"
** Clone your repository
#+BEGIN_SRC bash
git clone https://github.com/devnich/garden.git ~/Desktop/garden-clone
cd garden-clone
touch trees.txt
#+END_SRC

** Edit trees.txt
#+BEGIN_EXAMPLE
1. Plum
2. Pluot
3. Aprium
#+END_EXAMPLE

** Update and push
#+BEGIN_SRC bash
pwd                             # we are in ~/Desktop/garden-clone
git status
git add trees.txt
git commit -m "I like plums"
git push
cd ../garden                   # now we are in ~/Desktop/garden
ls
git pull
ls
#+END_SRC

* Conflicts
#+CAPTION: A more complicated merge (1)
#+NAME: Pre-merge state
[[file:images/basic-merging-1.png]]

#+CAPTION: A more complicated merge (2)
#+NAME: gPost-merge state
[[file:images/basic-merging-2.png]]

** Person 1 edits ~/Desktop/garden/shopping_list.txt
#+BEGIN_EXAMPLE
1. Cherry tomatoes
2. Italian basil
3. Jalapenos
4. Scotch bonnet peppers
#+END_EXAMPLE

#+BEGIN_SRC bash
git add shopping_list.txt
git commit -m "Added more peppers our copy"
git push origin master
#+END_SRC

** Person 2 edits ~/Desktop/garden-clone/shopping_list.txt /without/ pulling
#+BEGIN_EXAMPLE
1. Cherry tomatoes
2. Italian basil
3. Jalapenos
4. Garlic
#+END_EXAMPLE

#+BEGIN_SRC bash
git add shopping_list.txt
git commit -m "Added garlic to rival copy"

# Rejected because Git can't merge changes cleanly
git push origin master

# Pulling results in a local conflict
git pull origin master
#+END_SRC

** Edit conflict, stage, commit, and push
Edit the file to resolve the conflict. You can delete one of the two lines, combine them, or make any other changes. Delete the conflict markers before staging the file (the lines beginning in "<", "=", and ">").
#+BEGIN_EXAMPLE
<<<<<<< HEAD
4. Garlic
=======
4. Cayenne peppers
>>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d
#+END_EXAMPLE

You may want to enable a default merge tool:
#+BEGIN_SRC bash
git config --global merge.tool meld
#+END_SRC
- Open source merge tools include Vimdiff, Meld, Kdiff, Gitfiend, Git Cola, etc. There are many other options!
- Always pull before you push
- To minimize conflicts, do your work on a separate branch
* Pull Requests
cf. https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests
Topics to discuss:
- Shared Repository model vs. Fork-and-Pull model
- Protected branches
- Create a pull request
- Request a PR review
- Merging PR
** Shared Repository Workflow
1. Clone repository
2. Create branch
3. Create pull request

* Graphical User Interfaces
- Pro
  - Viewing history is usually a much better experience
- Cons
  - Not fully functional (missing commands and command options)
  - Git is still complicated. Menus and buttons don’t change that.

* Version control with source vs. notebooks
- .ipynb files contain a lot of JSON boilerplate that isn't code

* Next steps (intermediate Git)
*** Useful commands that you should add to your repertoire
- ~git blame~: See who changed each line of a file
- ~git bisect~: Find out when a change was introduced (good man page)
- ~git revert~: Undo your recent commits (good man page)
- ~git add --patch~: Stage a part of a file ("hunk") instead the entire file
- ~git -i~ [command]: Run a command interactively, confirming each step

*** Potentially dangerous commands that are useful in certain circumstances. Use with caution!
- ~git reset~: Throw away uncommitted changes (there are many options that affect what gets thrown away; read the documentation)
- ~git reset --hard~: Throw away some of your commits to get back to an earlier project state. Cannot be undone!
- ~git rebase~: Rewrite the history of branch A to include branch B. This is different than merging branch B into branch A; merging retains your project history, whereas rebasing rewrites that history.
- ~git squash~: Convert multiple commits into a single commit. This also rewrites your project history.

*** Dangerous commands you should avoid
- ~git cherry-pick~: Copy a single commit from a different branch. This rewrites your project history piecemeal, which can make it difficult to merge branches in the future.

* Credits
1. https://dlstrong.github.io/git-novice/
2. https://git-scm.com/book/en/v2
3. https://gitlab.com/liibre/curso/-/wikis/material
4. https://swcarpentry.github.io/git-novice/reference
5. https://swcarpentry.github.io/shell-novice/reference/
6. https://twitter.com/jay_gee

* References
1. The Pro Git book: https://git-scm.com/book/en/v2
2. Graphical user interfaces for Git (useful for visualizing diffs and merges): https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Graphical-Interfaces
3. Git for Advanced Beginners: http://think-like-a-git.net
4. "Git is built on a graph. Almost every Git command manipulates this graph. To understand Git deeply, focus on the properties of this graph, not workflows or commands.": https://codewords.recurse.com/issues/two/git-from-the-inside-out
5. A Visual Git Reference: https://marklodato.github.io/visual-git-guide/index-en.html

* COMMENT How to export this document to other formats
** Export to Markdown using Pandoc
Do this if you want code syntax highlighting and a table of contents on Github.
*** Generate generic Markdown file
#+BEGIN_SRC bash
pandoc README.org -o tmp.md
#+END_SRC

*** Edit generic Markdown file to remove illegal front matter
1. Org directives
2. Anything that isn't part of the document structure (e.g. TODO items)

*** Generate Github Markdown with table of contents
#+BEGIN_SRC bash
pandoc -f markdown --toc --toc-depth=2 -s tmp.md -o README.md
#+END_SRC

*** Find and replace code block markers in final document
#+BEGIN_EXAMPLE
M-x qrr ` {.bash}` `bash`
#+END_EXAMPLE

** Export to Markdown using Emacs Org mode
Do this if you want a table of contents on Github.
#+BEGIN_EXAMPLE
M-x org-md-export-to-markdown
#+END_EXAMPLE

** Export to Microsoft Word using Pandoc
#+BEGIN_SRC bash
# The --reference-doc flag is optional; it provides fine-grained control
# over the appearance of the output document
pandoc README.org -t markdown | pandoc --no-highlight --reference-doc=/Users/gilgamesh/Google Drive/Templates/custom-reference.docx -o README.docx
#+END_SRC
